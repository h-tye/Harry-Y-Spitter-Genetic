deleteall;
clear;

# define grid size dimensions
grid_size_x = 20;
grid_size_y = 20;
cell_width = 120e-9;
cell_height = 120e-9;

si_sqr_xspan = 2.4e-6;
si_sqr_yspan = 2.4e-6;
wg_w = 0.5e-6;

# define some stuff for FOM calculations
FOM = 0;
a = 2/3;

# add solver
addvarfdtd;
set('mesh accuracy',6);
set("x",0); set('x span', 3.5e-6);
set("y",0); set('y span', 3.5e-6);
set("z max", 1.5e-6);
set('z min', -1.5e-6);
set('y0', -(si_sqr_xspan/2 + 0.2e-6));
set("x0", -(si_sqr_yspan - wg_w)/2);

# add substrate
addrect; set('name','BOX');
set("x",0); set("y",0); 
set('x span', 5e-6);
set('y span', 5e-6);
set("z max",-0.11e-6);
set('z min', -2e-6);
set('material', "SiO2 (Glass) - Palik");
    
######################################

    # add rectangle for silicon
    addrect(); set("name","si_sqr");
    set("x",0); set("y",0); set("z",0);
    set('x span', si_sqr_xspan);
    set('y span', si_sqr_yspan);
    set('z span', 220e-9);
    set('material', 'Si (Silicon) - Palik');
    
    #define upper output
    addrect(); set("name","wg_out_thru");
    set("y min", si_sqr_xspan/2);
    set('y max', si_sqr_xspan/2 + 1.5e-6);
    set("x", 0);
    set('x span', wg_w);
    set("z",0);
    set('z span', 220e-9);
    set('material', 'Si (Silicon) - Palik');
    
    #define middle output
    addrect(); set("name","wg_out_up");
    set("y min", si_sqr_xspan/2);
    set('y max', si_sqr_xspan/2 + 1.5e-6);
    set("x", -(si_sqr_xspan - wg_w)/2);
    set('x span', wg_w);
    set("z",0);
    set('z span', 220e-9);
    set('material', 'Si (Silicon) - Palik');
    
    #define bottom 3rd output
    addrect(); set("name","wg_out_bottom");
    set("y min", si_sqr_xspan/2);
    set('y max', si_sqr_xspan/2 + 1.5e-6);
    set("x", (si_sqr_xspan - wg_w)/2);
    set('x span', wg_w);
    set("z",0);
    set('z span', 220e-9);
    set('material', 'Si (Silicon) - Palik');

    #define input waveguide
    addrect(); set("name","wg_in_thru");
    set("y max", -si_sqr_xspan/2);
    set('y min', -(si_sqr_xspan/2 + 1.5e-6));
    set("x", 0);
    set('x span', wg_w);
    set("z",0);
    set('z span', 220e-9);
    set('material', 'Si (Silicon) - Palik');  
    
######################################    

# add source
addmodesource;
set("injection axis","y"); set('set wavelength',1);
set("wavelength start",1.5e-6);
set("wavelength stop",1.6e-6);
set("x",0);
set('y', -(si_sqr_xspan/2 + 0.2e-6));
set("x span",2.5e-6);

# add monitor
addpower;
set("name","mon_top_down");
set("x",0); set("y",0);
set('x span', si_sqr_xspan + 0.5e-6);
set('y span', si_sqr_yspan + 0.5e-6);
set('z', 0);

# add index monitor (big monitor)
addindex;
set("name","mon_index");
set("x",0); set("y",0);
set('x span', si_sqr_xspan + 1.5e-6);
set('y span', si_sqr_yspan + 1.5e-6);
set('z', 0);

# add transmittance monitors
addpower;
set("name","mon_source");
set("monitor type","2D Y-normal");
set("x", 0);
set('y', -(si_sqr_xspan/2 + 0.1e-6));
set('z', 0);
set('x span', 1e-6);
set('z span', 1e-6);

addpower;
set("name","mon_top");
set("monitor type","2D Y-normal");
set("x", -(si_sqr_yspan - wg_w)/2);
set('y', (si_sqr_xspan/2 + 0.4e-6));
set('z', 0);
set('x span', .65e-6);
set('z span', 1e-6);

addpower;
set("name","mon_thru");
set("monitor type","2D Y-normal");
set("x", 0);
set('y', (si_sqr_xspan/2 + 0.4e-6));
set('z', 0);
set('x span', .65e-6);
set('z span', 1e-6);

addpower;
set("name","mon_bottom");
set("monitor type","2D Y-normal");
set("x", (si_sqr_yspan - wg_w)/2);
set('y', (si_sqr_xspan/2 + 0.4e-6));
set('z', 0);
set('x span', .65e-6);
set('z span', 1e-6);

# add changes

addstructuregroup;
set('name','hole_array');

# start for loop
x = 1;

# define srating hole pattern
    holeArray = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1;
                1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];
holeMatrix = holeArray;

###################################
# change run_num to run more or less instances
run_num = 2;
FOM_array = zeros(run_num);
T_thru_array = zeros(run_num);
T_cross_array = zeros(run_num);

#run_num_store = cell(run_num-1);
#FOM_store = cell(run_num-1);
#T_thru_store = cell(run_num-1);
#T_cross_store = cell(run_num-1);
#T_source_store = cell(run_num-1);

for(0;x<run_num;x=x+1){ 
    #select and delete old cirles
    select('hole_array');
    delete;
    
    # create circles based on starting array
    for (i = 0; i < grid_size_x; i = i + 1){
        for (j = 0; j < grid_size_y; j = j + 1){
            # calculate the position for each cell
            x_position = (i) * cell_width - si_sqr_xspan/2;
            y_position = (j) * cell_height - si_sqr_xspan/2;
            
            # create each cell
            addcircle();
            set('name','Circle');
            set('radius', 45e-9);
            set('x', x_position + cell_width/2);
            set('y', y_position + cell_height/2);
            set('z span', 222e-9);
            addtogroup('hole_array');
            
            if(holeMatrix(i+1,j+1) == 0){
                set('material','Si (Silicon) - Palik');
            }else{
                set('material','etch');
            }
        }
    }
    
    #lets try and run this jawn
    run;

    # get transmittance values from monitors
    T_source = getresult('mon_source',"T");
    T_thru = getresult('mon_thru',"T");
    T_cross = getresult('mon_cross',"T");
    
    T_thru_ideal = 1/3;
    T_cross_ideal = 2/3;

    # average transmittance over broader band
    idx1 = 2;
    idx2 = 3;
    idx3 = 4;
    
    T_source_avg = (T_source.T(idx1) + T_source.T(idx2) + T_source.T(idx3))/3;
    T_thru_avg = (T_thru.T(idx1) + T_thru.T(idx2) + T_thru.T(idx3))/3;
    T_cross_avg = (T_cross.T(idx1) + T_cross.T(idx2) + T_cross.T(idx3))/3;
    
    
    # Check FOM
    New_FOM = 1 - (abs(T_thru_avg - T_thru_ideal) + abs(T_cross_avg - T_cross_ideal));
    ?New_FOM;
    FOM_array(run_num) = New_FOM;
    if (New_FOM > FOM){
        FOM = New_FOM;
        holeArray = holeMatrix;
    }
    
    run_num_store{x} = x;
    FOM_store{x} = FOM;
    T_thru_store{x} = T_thru_avg;
    T_cross_store{x} = T_cross_avg;
    T_source_store{x} = T_source_avg;
    
    ###########################################
    
    holeMatrix = holeArray;
    
    if (FOM > 0.95){
        loop_num = 1;
    }else if (FOM > 0.9){
        loop_num = 2;
    }else if (FOM > 0.85){
        loop_num = 3;
    }else if (FOM > 0.8){
        loop_num = 4;
    }else if (FOM > 0.7){
        loop_num = 5;
    }else{
        loop_num = 10;
    }
    
    # loop through array and swap 10 random values
    for (loops = 0; loops < loop_num; loops = loops + 1){
        rndIdx = rand(1,400,2);
        if(holeMatrix(rndIdx) == 1){
            holeMatrix(rndIdx) = 0;
        }else{
            holeMatrix(rndIdx) = 1;
        }
    }
    x = x + 1;
    
    #switch to layout mode
    if (x<run_num){
        switchtolayout;
    }
}

# save data to MATLAB file
#write("FOMS.txt",FOM_store, "overwrite");

###############################################



